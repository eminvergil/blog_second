{"version":3,"sources":["webpack:///./src/components/Contact/Contact.js","webpack:///./src/pages/contact.js"],"names":["Contact","props","state","name","email","emailReal","message","handleChange","bind","handleSubmit","encode","data","Object","keys","map","key","encodeURIComponent","join","e","preventDefault","this","b","document","getElementById","disabled","value","style","transition","backgroundColor","theme","color","brand","primaryLight","borderColor","fetch","contactPostAddress","method","headers","body","then","rawResponse","json","response","console","log","result","navigate","error","alert","catch","setState","target","render","query","queryResults","site","siteMetadata","primary","primaryDark","action","onSubmit","data-netlify","type","onChange","display","required","id","React","Component","ContactPage","Fragment","Article","Headline","title","Seo","pageTitle"],"mappings":"qVAgMeA,E,oBAtLb,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MACKC,MAAQ,CACXC,KAAM,GACNC,MAAO,GACPC,UAAW,GACXC,QAAS,IAGX,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,MACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,MAVH,E,kHAanBE,OAAA,SAAOC,GACL,OAAOC,OAAOC,KAAKF,GAChBG,KAAI,SAAAC,GAAG,OAAIC,mBAAmBD,GAAO,IAAMC,mBAAmBL,EAAKI,OACnEE,KAAK,M,EAGVR,aAAA,SAAaS,GAEX,GADAA,EAAEC,iBACsB,IAApBC,KAAKlB,MAAME,MAAf,CAEA,IAAMiB,EAAIC,SAASC,eAAe,gBAClCF,EAAEG,UAAW,EACbH,EAAEI,MAAQ,aACVJ,EAAEK,MAAMC,WAAa,oBACrBN,EAAEK,MAAME,gBAAkBC,IAAMC,MAAMC,MAAMC,aAC5CX,EAAEK,MAAMO,YAAcJ,IAAMC,MAAMC,MAAMC,aACxCX,EAAEK,MAAMI,MAAQ,OAEhBI,MAAMd,KAAKe,mBAAoB,CAC7BC,OAAQ,OACRC,QAAS,CAAE,eAAgB,qCAC3BC,KAAMlB,KAAKV,OAAL,eAAc,YAAa,WAAcU,KAAKlB,UAEnDqC,MAAK,SAASC,GACb,OAAOA,EAAYC,UAEpBF,MAAK,SAASG,GACbC,QAAQC,IAAIF,GACW,WAAnBA,EAASG,QACXF,QAAQC,IAAI,2BACZE,YAAS,cAETH,QAAQI,MAAML,GACdM,MAAM,sDAGTC,OAAM,SAAAF,GACLJ,QAAQI,MAAMA,GACdC,MAAM,6D,EAIZzC,aAAA,SAAaW,GAAI,IAAD,EACdE,KAAK8B,WAAL,MACGhC,EAAEiC,OAAOhD,MAAOe,EAAEiC,OAAO1B,MAD5B,K,EAKF2B,OAAA,WAAU,IAAD,OACP,OACE,kBAAC,IAAD,CACAC,MAAK,aASLD,OAAS,SAAAE,GAKP,IAAMnB,EAAqBmB,EAAaC,KAAKC,aAAarB,mBAG1D,OAFA,EAAKA,mBAAqBA,EAGxB,oCACE,+DAkFoBN,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAtFtC,SACE,0BACEvD,KAAK,UACLiC,OAAO,OACPuB,OAAQxB,EACRyB,SAAU,EAAKnD,aACfoD,eAAa,OALf,sCAiFkBhC,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,iBA9ElC,iEA0EgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBA9ElC,gCACkB,8DAyEF7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA5EhC,2BACEI,KAAK,OACL3D,KAAK,OACLsB,MAAO,EAAKvB,MAAMC,KAClB4D,SAAU,EAAKxD,aAJjB,sCAwEcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBArElC,8DAiEgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBArE7B,8DAiEW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBApElC,iEAgEgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBApElC,kCACoB,8DA+DJ7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAlEhC,2BACEI,KAAK,QACL3D,KAAK,YACLsB,MAAO,EAAKvB,MAAMG,UAClB0D,SAAU,EAAKxD,aAJjB,sCA8DcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBA3DlC,8DAuDgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA3D7B,8DAuDW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA1DlC,2BACEI,KAAK,QACL3D,KAAK,QACLsB,MAAO,EAAKvB,MAAME,MAClB2D,SAAU,EAAKxD,aACfmB,MAAO,CAACsC,QAAS,QALnB,sCAsDgBnC,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAnDlC,iEA+CgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAnDlC,wBACU,8DA8CM7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAjDhC,8BACEvD,KAAK,UACL8D,UAAU,EACVxC,MAAO,EAAKvB,MAAMI,QAClByD,SAAU,EAAKxD,aAJjB,sCA6CcsB,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,mBA1ClC,8DAsCgB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA1C7B,8DAsCW7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBAzClC,2BACEI,KAAK,SACLrC,MAAM,SACNyC,GAAG,eAHL,sCAqCgBrC,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,gBAzClC,cAMwB,KAAvBvB,GACC,8DA8BcN,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,iBAlChC,kCApDN,0oBAkFoB7B,IAAMC,MAAMC,MAAM0B,QAlFtC,qBAmF0B5B,IAAMC,MAAMC,MAAM0B,QAnF5C,oEAsFoB5B,IAAMC,MAAMC,MAAM2B,YAtFtC,8BAkFoB7B,IAAMC,MAAMC,MAAM0B,QACZ5B,IAAMC,MAAMC,MAAM0B,QAGxB5B,IAAMC,MAAMC,MAAM2B,kBA1G5C,U,GAjEgBS,IAAMC,W,kBCmBbC,UAlBK,SAAApE,GAElB,OACE,kBAAC,IAAMqE,SAAP,KACI,kBAACC,EAAA,EAAD,CAAS1C,MAAOA,KACd,gCACE,kBAAC2C,EAAA,EAAD,CAAUC,MAAM,UAAU5C,MAAOA,OAEnC,kBAAC,EAAD,CAASA,MAAOA,OAEpB,kBAAC6C,EAAA,EAAD,CAAKC,UAAU,e","file":"component---src-pages-contact-js-36a6942bda04fa28799a.js","sourcesContent":["/* eslint no-unused-vars: 0 */\r\n\r\nimport { navigate } from \"gatsby\";\r\nimport React from \"react\";\r\nimport { StaticQuery, graphql } from \"gatsby\";\r\n\r\nimport theme from \"../../theme/theme.yaml\";\r\n\r\nclass Contact extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      name: \"\",\r\n      email: \"\", // honeypot\r\n      emailReal: \"\",\r\n      message: \"\"\r\n    }\r\n\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n\r\n  encode(data) {\r\n    return Object.keys(data)\r\n      .map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(data[key]))\r\n      .join(\"&\");\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (this.state.email != \"\") return // honeypot\r\n\r\n    const b = document.getElementById(\"submitButton\")\r\n    b.disabled = true\r\n    b.value = \"Sending...\"\r\n    b.style.transition = \"200ms ease-in-out\"\r\n    b.style.backgroundColor = theme.color.brand.primaryLight\r\n    b.style.borderColor = theme.color.brand.primaryLight\r\n    b.style.color = \"#666\"\r\n\r\n    fetch(this.contactPostAddress, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/x-www-form-urlencoded\" },\r\n      body: this.encode({ \"form-name\": \"contact\", ...this.state })\r\n    })\r\n      .then(function(rawResponse) {\r\n        return rawResponse.json();\r\n      })\r\n      .then(function(response) {\r\n        console.log(response)\r\n        if (response.result == 'success') {\r\n          console.log(\"Form submission success\");\r\n          navigate(\"/success\");\r\n        } else {\r\n          console.error(response);\r\n          alert(\"Server responded with error! Sorry about this.\")\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error(error);\r\n        alert(\"Unable to deliver. Is your internet connection down?\")\r\n      });\r\n  }\r\n\r\n  handleChange(e) {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <StaticQuery\r\n      query={graphql`\r\n        query ContactQuery {\r\n          site {\r\n            siteMetadata {\r\n              contactPostAddress\r\n            }\r\n          }\r\n        }\r\n      `}\r\n      render={ queryResults => {\r\n\r\n        // It's very ugly to update this.contactPostAddress inside render(), but Gatsby currently\r\n        // offers only two ways of using StaticQuery: this way (inside render), and as a React Hook\r\n        // (which would be incompatible with a class component).\r\n        const contactPostAddress = queryResults.site.siteMetadata.contactPostAddress\r\n        this.contactPostAddress = contactPostAddress\r\n\r\n        return (\r\n          <>\r\n            <div className=\"form\">\r\n              <form\r\n                name=\"contact\"\r\n                method=\"post\"\r\n                action={contactPostAddress}\r\n                onSubmit={this.handleSubmit}\r\n                data-netlify=\"true\"\r\n              >\r\n                <label className=\"formItem\" >\r\n                  Name (optional):<br/>\r\n                  <input\r\n                    type=\"text\"\r\n                    name=\"name\"\r\n                    value={this.state.name}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <br/><br/>\r\n                <label className=\"formItem\" >\r\n                  E-mail (optional):<br/>\r\n                  <input\r\n                    type=\"email\"\r\n                    name=\"emailReal\"\r\n                    value={this.state.emailReal}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <br/><br/>\r\n                <input\r\n                  type=\"email\"\r\n                  name=\"email\" // actually honeypot\r\n                  value={this.state.email}\r\n                  onChange={this.handleChange}\r\n                  style={{display: \"none\"}}\r\n                />\r\n                <label className=\"formItem\" >\r\n                  Message:<br/>\r\n                  <textarea\r\n                    name=\"message\"\r\n                    required={true}\r\n                    value={this.state.message}\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </label>\r\n                <br/><br/>\r\n                <input\r\n                  type=\"submit\"\r\n                  value=\"Submit\"\r\n                  id=\"submitButton\"\r\n                  className=\"formItem\" \r\n                />\r\n                {contactPostAddress === \"\" && (\r\n                  <h1>Undefined contactPostAddress!</h1>\r\n                )}\r\n              </form>\r\n\r\n              {/* --- STYLES --- */}\r\n              <style jsx>{`\r\n                .formItem input,textarea {\r\n                  width: 100%;\r\n                  border-radius: 5px;\r\n                  border-width: 2px;\r\n                  font-family: Open Sans;\r\n                  font-weight: 400;\r\n                  font-size: 1em;\r\n                }\r\n                .formItem input {\r\n                  height: 30px;\r\n                  max-width: 300px;\r\n                }\r\n                .formItem textarea {\r\n                  height: 100px;\r\n                  max-width: 600px;\r\n                }\r\n                #submitButton {\r\n                  color: white;\r\n                  height: auto;\r\n                  font-family: Open Sans;\r\n                  font-size: 1.2em;\r\n                  font-weight: 400;\r\n                  padding: 0.5em 3em;\r\n                  border-radius: 5px;\r\n                  background: ${theme.color.brand.primary};\r\n                  border: 1px solid ${theme.color.brand.primary};\r\n                }\r\n                #submitButton:hover {\r\n                  background: ${theme.color.brand.primaryDark};\r\n                  cursor: pointer;\r\n                }\r\n              `}</style>\r\n            </div>\r\n          </>\r\n        )\r\n      }}\r\n      />\r\n    )\r\n  }\r\n};\r\n\r\nexport default Contact;\r\n","import PropTypes from \"prop-types\";\r\nimport React from \"react\";\r\nimport { graphql } from \"gatsby\";\r\nimport theme from \"../theme/theme.yaml\";\r\nimport Article from \"../components/Article\";\r\nimport Contact from \"../components/Contact\";\r\nimport Headline from \"../components/Article/Headline\";\r\nimport Seo from \"../components/Seo\";\r\n\r\nconst ContactPage = props => {\r\n\r\n  return (\r\n    <React.Fragment>\r\n        <Article theme={theme}>\r\n          <header>\r\n            <Headline title=\"Contact\" theme={theme} />\r\n          </header>\r\n          <Contact theme={theme} />\r\n        </Article>\r\n      <Seo pageTitle=\"Contact\"/>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nContactPage.propTypes = {\r\n};\r\n\r\nexport default ContactPage;\r\n"],"sourceRoot":""}